{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/contexts/AppContext.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react'\nimport { useRouter } from 'next/navigation'\n\ninterface User {\n  id: string\n  phone: string\n  email: string\n  nativeLanguage: string\n  isVerified: boolean\n}\n\ninterface AppContextType {\n  user: User | null\n  setUser: (user: User | null) => void\n  isLoading: boolean\n  login: (phone: string, email: string) => Promise<void>\n  logout: () => void\n  updateLanguage: (language: string) => Promise<void>\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined)\n\nexport function AppProvider({ children }: { children: ReactNode }) {\n  const router = useRouter()\n  const [user, setUser] = useState<User | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    // Check for existing session\n    const checkSession = async () => {\n      try {\n        // TODO: In production, verify session with backend\n        const savedUser = localStorage.getItem('user')\n        if (savedUser) {\n          setUser(JSON.parse(savedUser))\n        }\n      } catch (error) {\n        console.error('Session check failed:', error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    checkSession()\n  }, [])\n\n  const login = async (phone: string, email: string) => {\n    try {\n      setIsLoading(true)\n      \n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ phone, email }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Login failed')\n      }\n\n      const data = await response.json()\n      \n      // Create temporary user object\n      // In production, this would come from your backend\n      const newUser: User = {\n        id: 'temp-' + Date.now(),\n        phone,\n        email,\n        nativeLanguage: '',\n        isVerified: false,\n      }\n\n      setUser(newUser)\n      localStorage.setItem('user', JSON.stringify(newUser))\n      \n      // Redirect to language selection if not set\n      if (!newUser.nativeLanguage) {\n        router.push('/language-selection')\n      } else {\n        router.push('/chat')\n      }\n    } catch (error) {\n      console.error('Login error:', error)\n      throw error\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const logout = () => {\n    setUser(null)\n    localStorage.removeItem('user')\n    router.push('/')\n  }\n\n  const updateLanguage = async (language: string) => {\n    if (!user) return\n\n    try {\n      setIsLoading(true)\n      \n      const response = await fetch('/api/translate', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          nativeLanguage: language,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to update language')\n      }\n\n      const updatedUser = {\n        ...user,\n        nativeLanguage: language,\n      }\n\n      setUser(updatedUser)\n      localStorage.setItem('user', JSON.stringify(updatedUser))\n      \n      // Redirect to chat after language is set\n      router.push('/chat')\n    } catch (error) {\n      console.error('Language update error:', error)\n      throw error\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        user,\n        setUser,\n        isLoading,\n        login,\n        logout,\n        updateLanguage,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport function useApp() {\n  const context = useContext(AppContext)\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider')\n  }\n  return context\n}\n\n// Example usage:\n/*\n// In _app.tsx or layout.tsx:\n<AppProvider>\n  <Component {...pageProps} />\n</AppProvider>\n\n// In any component:\nconst { user, login, logout, updateLanguage } = useApp()\n\n// Login\nawait login('+1234567890', 'user@example.com')\n\n// Update language\nawait updateLanguage('es')\n\n// Access user info\nconsole.log(user?.nativeLanguage)\n\n// Logout\nlogout()\n*/\n"],"names":[],"mappings":"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","debugId":null}}]
}